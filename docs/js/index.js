(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

window.onload = function () {
  var root = d3.select('svg');
  var toolTip = d3.select('#tooltip');
  var viewWidth = +root.attr('viewBox').split(' ')[2];
  var viewHeight = +root.attr('viewBox').split(' ')[3];
  var sectionHeight = 500;
  var legendHeight = viewHeight - sectionHeight;
  var width = d3.select('body').node().offsetWidth;

  window.onresize = function () {
    width = d3.select('body').node().offsetWidth;
  };

  function setTooltip(e, t) {
    var d = d3.select(t).select('rect'),
        x = e.pageX - 230 * d3.event.pageX / width,
        y = e.pageY - 15 - toolTip.node().offsetHeight;
    toolTip.attr('data-value', d.attr('data-value')).attr('style', 'top: ' + y + 'px; left: ' + x + 'px; visibility: visible;');
    toolTip.text(d.attr('data-name'));
  }

  var toolTipHandler = {
    over: function over() {
      setTooltip(d3.event, this);
    },
    move: function move() {
      setTooltip(d3.event, this);
    },
    out: function out() {
      toolTip.attr('style', 'visibility: hidden;');
    } //toolTipHandler.out()

  };

  function wrap(data) {
    data.selectAll('text').each(function (d, i, a) {
      var words = d.data.name.split(/\s+/),
          width = d.x1 - d.x0 - 15,
          lineHeight = 1.1,
          text = d3.select(a[i]);
      var word,
          line = [],
          lineNumber = 1,
          tspan = text.append('tspan');

      while ((word = words.shift()) != undefined) {
        line.push(word);
        tspan.text(line.join(' '));

        if (tspan.node().getComputedTextLength() > width) {
          if (line.length > 1) {
            line.pop();
            tspan.text(line.join(' '));
            line = [word];
          } else {
            line = [];
          }

          tspan = text.append('tspan').attr('x', 0).attr('y', lineNumber++ * lineHeight + 'em').text(line.join(' '));
        }
      }
    });
  }

  function createSection(start, data) {
    var a = start.append('g').attr('width', viewWidth).attr('height', sectionHeight).attr('class', 'section').attr('data-name', data.name).attr('visibility', 'hidden');
    a.call(createTile, data, a).call(wrap, function (d) {
      return d;
    });
  }

  function createTile(g, data) {
    var hRoot = d3.hierarchy(data).sum(function (d) {
      return d.value;
    });
    var treemapLayout = d3.treemap().size([viewWidth, sectionHeight]).paddingInner(1);
    var color = d3.scaleOrdinal(d3.schemeCategory20, hRoot.leaves().map(function (d) {
      return d.name;
    }));
    treemapLayout(hRoot);
    var res = g.node();
    var a = d3.select(res).selectAll('g').data(hRoot.leaves()).enter().append('g').attr('class', 'tileGroup').attr('transform', function (d) {
      return "translate(".concat(d.x0, ",").concat(d.y0, ")");
    }).on('mouseover', toolTipHandler.over).on('mousemove', toolTipHandler.move).on('mouseout', toolTipHandler.out);
    a.append('rect').attr('class', 'tile').attr('data-name', function (d) {
      return d.data.name;
    }).attr('data-category', function (d) {
      return d.data.category;
    }).attr('data-value', function (d) {
      return d.value;
    }).attr('width', function (d) {
      return d.x1 - d.x0;
    }).attr('height', function (d) {
      return d.y1 - d.y0;
    }).attr('fill', function (d) {
      return color(d.data.category);
    });
    a.append('text').attr('transform', 'translate(4,12)').attr('clip-path', function (d) {
      return "polygon(0 0, ".concat(d.x1 - d.x0 - 4, " 0, ").concat(d.x1 - d.x0 - 4, " ").concat(d.y1 - d.y0 - 4, ", 0 ").concat(d.y1 - d.y0 - 4, ")");
    }).attr('class', 'h5').attr('width', function (d) {
      return d.x1 - d.x0;
    }).attr('height', function (d) {
      return d.y1 - d.y0;
    }).attr('data-name', function (d) {
      return d.data.name;
    });
    return res;
  }

  function positions(cnt) {
    var cols = 3;
    var i = 0;
    var l = 0;
    var res = [];

    while (i < cnt) {
      var j = 0;

      while (i < cnt && j < cols) {
        res.push([j++ * 200, l * 30]);
        i++;
      }

      l++;
    }

    return res;
  }

  function createLegends(start, data) {
    var color = {},
        pos = {};
    var a = start.append('g').attr('id', 'legend').attr('transform', "translate(250,".concat(sectionHeight + 50, ")")).attr('width', viewWidth).attr('height', legendHeight).selectAll('g').data(data).enter().append('g').attr('id', function (d) {
      color[d.name] = d3.scaleOrdinal(d3.schemeCategory20, d.children.map(function (d) {
        return d.name;
      }));
      pos[d.name] = d3.scaleOrdinal(positions(d.children.length), d.children.map(function (d) {
        return d.name;
      }));
      return d.name;
    }).attr('class', 'legend').attr('visibility', 'hidden').attr('data-name', function (d) {
      return d.name;
    }).selectAll('g').data(function (d) {
      return d.children;
    }).enter().append('g').attr('transform', function (d, e, f) {
      var i = f[0].parentNode.getAttribute('id');

      var _pos$i = pos[i](d.name),
          _pos$i2 = _slicedToArray(_pos$i, 2),
          x = _pos$i2[0],
          y = _pos$i2[1];

      return 'translate(' + x + ',' + y + ')';
    }).attr('y', function (d, e, f) {
      var i = f[0].parentNode.getAttribute('id');
      pos[i](d.name)[1];
    });
    a.append('rect').attr('class', 'legend-item').attr('fill', function (d, e, f) {
      var i = f[0].parentNode.parentNode.getAttribute('id');
      return color[i](d.name);
    });
    a.append('text').attr('transform', 'translate(27,18)').text(function (d) {
      return d.name;
    });
  }

  function setMouseHandlers() {
    var a = d3.selectAll('.section, .legend');

    function f1() {
      a.attr('visibility', 'hidden');
      a.nodes()[0].setAttribute('visibility', 'visible');
      a.nodes()[3].setAttribute('visibility', 'visible');
    }

    function f2() {
      a.attr('visibility', 'hidden');
      a.nodes()[1].setAttribute('visibility', 'visible');
      a.nodes()[4].setAttribute('visibility', 'visible');
    }

    function f3() {
      a.attr('visibility', 'hidden');
      a.nodes()[2].setAttribute('visibility', 'visible');
      a.nodes()[5].setAttribute('visibility', 'visible');
    }

    d3.select('#video').on('click', f1);
    d3.select('#movie').on('click', f2);
    d3.select('#kick').on('click', f3);
    f1();
  }

  d3.queue().defer(d3.json, 'https://cdn.rawgit.com/freeCodeCamp/testable-projects-fcc/a80ce8f9/src/data/tree_map/kickstarter-funding-data.json').defer(d3.json, 'https://cdn.rawgit.com/freeCodeCamp/testable-projects-fcc/a80ce8f9/src/data/tree_map/movie-data.json').defer(d3.json, 'https://cdn.rawgit.com/freeCodeCamp/testable-projects-fcc/a80ce8f9/src/data/tree_map/video-game-sales-data.json').await(function (error, kickstarterPledges, movieSales, videoGameSales) {
    if (error) throw error;
    createSection(root, kickstarterPledges);
    createSection(root, movieSales);
    createSection(root, videoGameSales);
    createLegends(root, [kickstarterPledges, movieSales, videoGameSales]);
    setMouseHandlers([kickstarterPledges, movieSales, videoGameSales]);
  });
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
